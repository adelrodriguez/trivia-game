{"version":3,"sources":["components/QuestionCard/QuestionCard.module.css","components/ResultsList/ResultsList.module.css","App.module.css","hooks/useStore.ts","screens/IntroScreen.tsx","components/QuestionCard/QuestionCard.tsx","components/AnswerButton/AnswerButton.tsx","components/QuestionStep/QuestionStep.tsx","screens/QuizScreen.tsx","components/ResultsItem/ResultsItem.tsx","components/ResultsList/ResultsList.tsx","screens/ResultsScreen.tsx","App.tsx","config/api.ts","services/questions.ts","config/config.ts","store/injections.ts","utils/parseString.ts","store/questions.ts","store/index.ts","serviceWorker.ts","index.tsx","components/QuestionStep/QuestionStep.module.css"],"names":["module","exports","typedHooks","createTypedHooks","useStoreActions","useStore","useStoreState","useStoreDispatch","IntroScreen","loading","state","questions","error","getQuestions","actions","useEffect","Loader","active","Transition","animation","duration","transitionOnMount","Header","size","textAlign","icon","Icon","name","Subheader","Container","to","Button","QuestionCard","text","Card","centered","className","styles","card","Content","content","AnswerButton","type","onPress","circular","positive","negative","onClick","QuestionStep","step","steps","question","onAnswerPress","container","category","progress","Progress","value","total","indicating","buttons","QuizScreen","push","useHistory","answerQuestion","length","map","index","id","key","render","next","answer","ResultsItem","correct","List","Item","color","fitted","Description","startCase","toString","ResultsList","results","relaxed","divided","verticalAlign","result","ResultsScreen","score","reset","fluid","App","app","path","api","axios","create","baseURL","process","REACT_APP_API_URL","params","amount","difficulty","injections","questionsService","get","parseString","str","DOMParser","parseFromString","body","textContent","storeModel","questionsById","computed","keyBy","answers","filter","showLoading","action","payload","showError","thunk","_","a","addQuestions","data","forEach","shortid","generate","correctAnswer","correct_answer","store","createStore","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a0574e5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"QuestionCard_card__3EbUk\",\"content\":\"QuestionCard_content__2ZFsb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ResultsList_card__6pPo7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","import { createTypedHooks } from 'easy-peasy';\nimport { StoreModel } from '../store';\n\nconst typedHooks = createTypedHooks<StoreModel>();\n\nexport const useStore = typedHooks.useStore;\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import React, { useEffect } from 'react';\nimport {\n  Transition,\n  Button,\n  Header,\n  Icon,\n  Container,\n  Loader,\n} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { useStoreState, useStoreActions } from '../hooks';\n\nexport function IntroScreen() {\n  const loading = useStoreState(state => state.questions.loading);\n  const error = useStoreState(state => state.questions.error);\n\n  const { getQuestions } = useStoreActions(actions => actions.questions);\n\n  useEffect(() => {\n    getQuestions();\n  }, [getQuestions]);\n\n  if (loading) {\n    return (\n      <div>\n        <Loader active>Loading</Loader>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Transition animation=\"fade up\" duration={1000} transitionOnMount>\n        <Header size=\"huge\" textAlign=\"center\" icon>\n          <Icon name=\"warning\" />\n          Error\n          <Header.Subheader>\n            There was an error while loading the questions. Please refresh the\n            page.\n          </Header.Subheader>\n        </Header>\n      </Transition>\n    );\n  }\n\n  return (\n    <Transition animation=\"fade up\" duration={1000} transitionOnMount>\n      <Container textAlign=\"center\">\n        <Header size=\"huge\" textAlign=\"center\" icon>\n          <Icon name=\"question circle outline\" />\n          Welcome to the Trivia Challenge!\n          <Header.Subheader>\n            You will be presented 10 True of False questions.\n          </Header.Subheader>\n        </Header>\n        <p>Can you score 100%?</p>\n        <Link to=\"/quiz\">\n          <Button>BEGIN</Button>\n        </Link>\n      </Container>\n    </Transition>\n  );\n}\n","import React from 'react';\nimport { Transition, Card, Header } from 'semantic-ui-react';\nimport styles from './QuestionCard.module.css';\n\ninterface Props {\n  text: string;\n}\n\nexport function QuestionCard({ text }: Props) {\n  return (\n    <Transition animation=\"fade left\" duration={1000} transitionOnMount>\n      <Card centered className={styles.card}>\n        <Card.Content textAlign=\"center\" className={styles.content}>\n          <Header>{text}</Header>\n        </Card.Content>\n      </Card>\n    </Transition>\n  );\n}\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n  type: 'true' | 'false';\n  onPress: () => void;\n}\n\nexport function AnswerButton({ type, onPress }: Props) {\n  return (\n    <Button\n      icon={type === 'true' ? 'check' : 'cancel'}\n      circular\n      positive={type === 'true'}\n      negative={type === 'false'}\n      onClick={onPress}\n      size=\"massive\"\n    />\n  );\n}\n","import React from 'react';\nimport { Header, Progress } from 'semantic-ui-react';\nimport { QuestionCard } from '../QuestionCard';\nimport { AnswerButton } from '../AnswerButton';\nimport styles from './QuestionStep.module.css';\n\ninterface Props {\n  step: number;\n  steps: number;\n  question: Question;\n  onAnswerPress: (answer: boolean) => void;\n}\n\nexport function QuestionStep({ step, steps, question, onAnswerPress }: Props) {\n  return (\n    <div className={styles.container}>\n      <Header>{question.category}</Header>\n      <QuestionCard text={question.question} />\n      <div className={styles.progress}>\n        <Progress value={step} total={steps} progress=\"percent\" indicating />\n      </div>\n      <div className={styles.buttons}>\n        <AnswerButton type=\"true\" onPress={() => onAnswerPress(true)} />\n        <AnswerButton type=\"false\" onPress={() => onAnswerPress(false)} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { useHistory, Redirect } from 'react-router-dom';\nimport { Transition } from 'semantic-ui-react';\nimport { useStoreState, useStoreActions } from '../hooks';\nimport { QuestionStep } from '../components/QuestionStep';\n\nexport function QuizScreen() {\n  const { push } = useHistory();\n  const questions = useStoreState(state => state.questions).questions;\n  const { answerQuestion } = useStoreActions(actions => actions.questions);\n\n  if (!questions.length) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Transition animation=\"fade up\" duration={1000} transitionOnMount>\n      <Wizard>\n        <Steps>\n          {questions.map((question, index) => {\n            const { id } = question;\n            return (\n              <Step\n                key={id}\n                id={id}\n                render={({ next }) => (\n                  <QuestionStep\n                    step={index}\n                    steps={questions.length}\n                    question={question}\n                    onAnswerPress={answer => {\n                      answerQuestion({ id, answer });\n\n                      if (index < questions.length - 1) {\n                        next();\n                      } else {\n                        push('/results');\n                      }\n                    }}\n                  />\n                )}\n              />\n            );\n          })}\n        </Steps>\n      </Wizard>\n    </Transition>\n  );\n}\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\nimport startCase from 'lodash/startCase';\n\ninterface Props {\n  question: string;\n  correct: boolean;\n  answer: boolean;\n}\n\nexport function ResultsItem({ question, correct, answer }: Props) {\n  return (\n    <List.Item>\n      <List.Icon\n        name={correct ? 'check' : 'cancel'}\n        color={correct ? 'green' : 'red'}\n        fitted\n        size=\"large\"\n      />\n      <List.Content>\n        <List.Header>{question}</List.Header>\n        <List.Description>\n          Your answer: <strong>{startCase(answer.toString())}</strong>\n        </List.Description>\n      </List.Content>\n    </List.Item>\n  );\n}\n","import React from 'react';\nimport { List, Card } from 'semantic-ui-react';\nimport { ResultsItem } from '../ResultsItem';\nimport styles from './ResultsList.module.css';\n\ninterface Props {\n  results: Result[];\n}\n\nexport function ResultsList({ results }: Props) {\n  return (\n    <Card centered className={styles.card}>\n      <Card.Content>\n        <List size=\"large\" relaxed divided verticalAlign=\"middle\">\n          {results.map(result => (\n            <ResultsItem\n              key={result.id}\n              answer={result.answer}\n              correct={result.correct}\n              question={result.question}\n            />\n          ))}\n        </List>\n      </Card.Content>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Header, Button, Transition } from 'semantic-ui-react';\nimport { Redirect, Link } from 'react-router-dom';\nimport { useStoreState, useStoreActions } from '../hooks';\nimport { ResultsList } from '../components/ResultsList';\n\nexport function ResultsScreen() {\n  const score = useStoreState(state => state.questions.score);\n  const results = useStoreState(state => state.questions.results);\n  const { reset } = useStoreActions(actions => actions.questions);\n\n  if (!results.length) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Transition animation=\"fade up\" duration={1000} transitionOnMount>\n      <div>\n        <Header size=\"huge\" textAlign=\"center\">\n          You scored\n          <Header.Subheader>\n            {score}/{results.length}\n          </Header.Subheader>\n        </Header>\n        <ResultsList results={results} />\n        <Link to=\"/\">\n          <Button fluid onClick={() => reset()}>\n            PLAY AGAIN?\n          </Button>\n        </Link>\n      </div>\n    </Transition>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { IntroScreen, QuizScreen, ResultsScreen } from './screens';\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/quiz\">\n            <QuizScreen />\n          </Route>\n          <Route path=\"/results\">\n            <ResultsScreen />\n          </Route>\n          <Route path=\"/\">\n            <IntroScreen />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n});\n","import { api, config } from '../config';\n\nconst { params } = config;\n\nexport const questions = {\n  get: () =>\n    api.get<ApiResponseDTO>('', {\n      params,\n    }),\n};\n","export const config = {\n  params: {\n    amount: 10,\n    difficulty: 'hard',\n    type: 'boolean',\n  },\n};\n","import { questions } from '../services';\n\nexport interface Injections {\n  questionsService: typeof questions;\n}\n\nexport const injections: Injections = {\n  questionsService: questions,\n};\n","export function parseString(str: string) {\n  const parser = new DOMParser();\n\n  const doc = parser.parseFromString(str, 'text/html');\n  const text = doc.body.textContent;\n\n  if (!text) return '';\n\n  return text;\n}\n","import { action, Action, thunk, Thunk, computed, Computed } from 'easy-peasy';\nimport keyBy from 'lodash/keyBy';\nimport shortid from 'shortid';\nimport { StoreModel } from '.';\nimport { Injections } from './injections';\nimport { parseString } from '../utils';\n\nexport interface QuestionsModel {\n  // State\n  loading: boolean;\n  error: boolean;\n  questions: Question[];\n  questionsById: Computed<\n    QuestionsModel,\n    { [key: string]: Question },\n    StoreModel\n  >;\n  answers: Answer[];\n  results: Computed<QuestionsModel, Result[], StoreModel>;\n  score: Computed<QuestionsModel, number, StoreModel>;\n  // Actions\n  showLoading: Action<QuestionsModel, boolean>;\n  showError: Action<QuestionsModel, boolean>;\n  getQuestions: Thunk<QuestionsModel, void, Injections, StoreModel>;\n  addQuestions: Action<QuestionsModel, ApiResponseDTO>;\n  answerQuestion: Action<QuestionsModel, { answer: boolean; id: string }>;\n  reset: Action<QuestionsModel, void>;\n}\n\nexport const questionsModel: QuestionsModel = {\n  loading: false,\n  error: false,\n  questions: [],\n  questionsById: computed(state => keyBy(state.questions, 'id')),\n  answers: [],\n  results: computed(state =>\n    state.answers.map(answer => ({\n      id: answer.id,\n      question: state.questionsById[answer.id].question,\n      answer: answer.answer,\n      correct: answer.correct,\n    }))\n  ),\n\n  score: computed(\n    state => state.answers.filter(answer => answer.correct).length\n  ),\n\n  showLoading: action((state, payload) => {\n    state.loading = payload;\n  }),\n\n  showError: action((state, payload) => {\n    state.error = payload;\n  }),\n\n  getQuestions: thunk(async (actions, _, { injections }) => {\n    const { questionsService } = injections;\n    const { showLoading, showError, addQuestions } = actions;\n\n    try {\n      showLoading(true);\n\n      const { data } = await questionsService.get();\n\n      showLoading(false);\n\n      addQuestions(data);\n    } catch (error) {\n      showError(true);\n    }\n  }),\n\n  addQuestions: action((state, payload) => {\n    payload.results.forEach(result => {\n      state.questions.push({\n        id: shortid.generate(),\n        question: parseString(result.question),\n        category: result.category,\n        correctAnswer: !!result.correct_answer,\n      });\n    });\n  }),\n\n  answerQuestion: action((state, payload) => {\n    const { id, answer } = payload;\n    const correct = state.questionsById[id].correctAnswer === answer;\n    state.answers.push({\n      id,\n      answer,\n      correct,\n    });\n  }),\n\n  reset: action(state => {\n    state.loading = false;\n    state.error = false;\n    state.questions = [];\n    state.answers = [];\n    state.results = [];\n    state.score = 0;\n  }),\n};\n","import { createStore } from 'easy-peasy';\nimport { injections } from './injections';\nimport { questionsModel, QuestionsModel } from './questions';\n\nexport interface StoreModel {\n  questions: QuestionsModel;\n}\n\nconst storeModel: StoreModel = {\n  questions: questionsModel,\n};\n\nexport const store = createStore(storeModel, {\n  injections,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { StoreProvider } from 'easy-peasy';\nimport { store } from './store';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"QuestionStep_container__1N7KL\",\"progress\":\"QuestionStep_progress__3Jj1y\",\"buttons\":\"QuestionStep_buttons__2stqn\"};"],"sourceRoot":""}